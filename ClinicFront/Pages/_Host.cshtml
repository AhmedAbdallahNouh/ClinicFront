@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace ClinicFront.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    @* <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" /> *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/swiper@10.0.4/swiper-bundle.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">

    <!-- Map -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="_content/MyLeafletApp/leaflet.css" />

    <link href="css/site.css" rel="stylesheet" />
    <link href="ClinicFront.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>

    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    @* <link href='https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css' rel='stylesheet'> *@
    <link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css' rel='stylesheet'>
    <script type='text/javascript' src=''></script>
    <script type='text/javascript' src='https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js'></script>
    <script type='text/javascript' src='https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js'></script>
    <link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/swiper@10.0.4/swiper-bundle.min.css" />
    <!-- ErrorModal -->
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
   
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="~/js/invaildsubmitmodal.js"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdn.lordicon.com/bhenfmcm.js"></script>
    <!-- Start Map -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        let map; // Declare map variable
        let markers = []; // Array to store markers

        // Function to initialize or update the map
        function initializeMap(mapData) {
            var container = L.DomUtil.get('map');
            if (container != null) {
                container._leaflet_id = null;
            }

            map = L.map('map').setView([mapData[0].latitude, mapData[0].longitude], 13);

            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            mapData.forEach((data) => {
                const marker = L.marker([data.latitude, data.longitude]).addTo(map);
                marker.bindPopup(`Nom Lieu Public: ${data.name}<br>Latitude: ${data.latitude}<br>Longitude: ${data.longitude}<br>Nom Village: ${data.description}`).openPopup();
                markers.push(marker);
            });
        }

        // Function to filter markers based on selected values
        function filterMarkers(name, desc, mapData) {
            markers.forEach(marker => map.removeLayer(marker));
            // Adding Marker to map.
            mapData.forEach((data) => {
                L.marker([data.latitude, data.longitude]).addTo(map)
                    .bindPopup(`Nom Lieu Public: ${data.name}<br>Latitude: ${data.latitude}<br>Longitude: ${data.longitude}<br>Nom Village: ${data.description}`).openPopup();
            });
        }

        // Function to get the current location
        function getCurrentLocation() {
            return new Promise((resolve, reject) => {
                if (!navigator.geolocation) {
                    reject("Geolocation is not supported by your browser");
                } else {
                    navigator.geolocation.getCurrentPosition((position) => {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;

                        // Move the map to the current location
                        map.setView(new L.LatLng(lat, lon), 13);

                        // Add a marker at the current location
                        const marker = L.marker([lat, lon]).addTo(map);
                        marker.bindPopup('This is your current location').openPopup();
                        markers.push(marker);
                        console.log(marker._latlng);

                        resolve({ lat: lat, lon: lon });
                    }, () => {
                        reject("Unable to retrieve your location");
                    });
                }
            });
        }

        function getCurrentLocationByUrl(url) {
            return new Promise((resolve, reject) => {
                const params = new URLSearchParams(url); // Parse the URL parameters
                const lat = params.get('lat');
                const lon = params.get('lon');

                if (lat && lon) {
                    resolve({ lat: parseFloat(lat), lon: parseFloat(lon) });
                } else {
                    reject("Latitude or longitude not found in the URL");
                }
            });
    </script>
    <!-- End Map -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="~/js/modal.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>        
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>       
    <script src="https://unpkg.com/swiper@10.0.4/swiper-bundle.min.js"></script>
    <script>
        window.initializeSwiper = function () {
            const swiper = new Swiper('.swiper-container', {
                slidesPerView: 3,
                spaceBetween: 25,
                loop: true,
                centerSlide: 'true',
                fade: 'true',
                grabCursor: 'true',
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                    dynamicBullets: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },

                breakpoints: {
                    0: {
                        slidesPerView: 1,
                    },
                    520: {
                        slidesPerView: 2,
                    },
                    950: {
                        slidesPerView: 3,
                    },
                },
            });
        }

    </script>

    <!-- JavaScript -->
    <script src="/js/jss.js"></script>
    <script>
        const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');
        const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl));
    </script>    
</body>
</html>
