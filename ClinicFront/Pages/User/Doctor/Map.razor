@using System.Text.Json;
@inject IJSRuntime jsruntime
<PageTitle>Index</PageTitle>
<input type="text" @bind="enteredUrl" placeholder="Enter URL">
<button @onclick="GetLocationFromUrl">Get Location</button>

<div class="MapParent">
    <div id="map" style="height: 400px;margin-top: 3rem;width: 100%;position: relative;outline: none;"></div>
    <button @onclick="GetUserLocation"><i class="fas fa-street-view"></i></button>
</div>

@code {
    private bool GetUserLocationSuccess = false;
    private double UserLatitude = 0.0;
    private double UserLongitude = 0.0;
    private string GetUserLocationError = null;
    public string? name;
    public string? description;
    public List<MapModel>? mapData;




    private string enteredUrl;

    private async Task GetLocationFromUrl()
    {
        GetUserLocationSuccess = false;
        GetUserLocationError = null;

        try
        {
            // You need to implement a method to extract location data from the entered URL.
            var location = await jsruntime.InvokeAsync<object>("getCurrentLocationByUrl", enteredUrl);


            if (location != null)
            {
                var lat = ((JsonElement)location).GetProperty("lat").GetDouble();
                var lon = ((JsonElement)location).GetProperty("lon").GetDouble();

                UserLatitude = lat;
                UserLongitude = lon;

                GetUserLocationSuccess = true;
                // FilterMarkers(); // You may want to filter markers based on the new location.
            }
            else
            {
                GetUserLocationError = "Invalid URL or no location data found.";
            }
        }
        catch (Exception ex)
        {
            GetUserLocationError = ex.Message;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        InitializeMap();
    }
    private async Task GetUserLocation()
    {
        GetUserLocationSuccess = false;
        GetUserLocationError = null;

        try
        {
            var location = await jsruntime.InvokeAsync<object>("getCurrentLocation");
            var lat = ((JsonElement)location).GetProperty("lat").GetDouble();
            var lon = ((JsonElement)location).GetProperty("lon").GetDouble();

            UserLatitude = lat;
            UserLongitude = lon;

            GetUserLocationSuccess = true;
            //FilterMarkers();
        }
        catch (Exception ex)
        {
            GetUserLocationError = ex.Message;
        }
    }
    public List<MapModel> GetData()
    {
        mapData = new List<MapModel>();

        mapData.Add(new MapModel
            {
                Name = "Alibaug",
                Latitude = UserLatitude,
                Longitude = UserLongitude,
                Description = "Alibaug is a coastal town and a municipal council in Raigad District in the Konkan region of Maharashtra, India."
            }

        );

        return mapData;
    }

    protected void NameChanged(string name)
    {
        InitializeMap();
        this.name = name;
        FilterMarkers();
    }

    protected void DescriptionChanged(string description)
    {
        InitializeMap();
        this.description = description;
        FilterMarkers();
    }

    private void InitializeMap()
    {
        GetData();
        jsruntime.InvokeVoidAsync("initializeMap", mapData);
    }

    private void FilterMarkers()
    {
        InitializeMap();
        if (!string.IsNullOrEmpty(this.name))
        {
            mapData = mapData.Where(x => x.Name == this.name).ToList();
        }
        if (!string.IsNullOrEmpty(this.description))
        {
            mapData = mapData.Where(x => x.Description.Contains(this.description)).ToList();
        }

        jsruntime.InvokeVoidAsync("filterMarkers", this.name, this.description, mapData);
    }

    public class MapModel
    {
        public string? Name { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string? Description { get; set; }
    }
}